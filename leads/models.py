import uuid
from django.db import models
from django.utils.timezone import now
from django.core.validators import RegexValidator, EmailValidator
from django.core.exceptions import ValidationError


class Lead(models.Model):
    """
    โ ูููุฐุฌ ุงูุนููุงุก ุงููุชููุนูู (Leads) ูู ุงููุธุงู ุงูุนูุงุฑู.
    """

    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False
    )  # โ ูุนุฑู ูุฑูุฏ ููู `Lead`

    campaign = models.ForeignKey(
        "campaigns.Campaign",
        on_delete=models.CASCADE,
        related_name="leads",
        verbose_name="Related Campaign",
        help_text="ุงูุญููุฉ ุงูุฅุนูุงููุฉ ุงูุชู ุชู ุงูุญุตูู ุนูู ุงูุนููู ุงููุญุชูู ูู ุฎูุงููุง."
    )

    name = models.CharField(
        max_length=255,
        verbose_name="Lead Name",
        help_text="ุฃุฏุฎู ุงุณู ุงูุนููู ุงููุญุชูู."
    )

    email = models.EmailField(
        verbose_name="Email",
        help_text="ุฃุฏุฎู ุจุฑูุฏูุง ุฅููุชุฑููููุง ุตุงูุญูุง.",
        validators=[EmailValidator(message="โ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุบูุฑ ุตุงูุญ.")]
    )

    phone = models.CharField(
        max_length=20,
        blank=True, null=True,
        verbose_name="Phone",
        help_text="ุฃุฏุฎู ุฑูู ูุงุชู ุตุงูุญ (ุงุฎุชูุงุฑู).",
        validators=[RegexValidator(regex=r'^\+?\d{7,15}$', message="โ ุฑูู ุงููุงุชู ุบูุฑ ุตุงูุญ. ูุฌุจ ุฃู ูููู ุจูู 7 ู 15 ุฑูููุง.")]
    )

    assigned_to = models.ForeignKey(
        "employees.Employee",
        on_delete=models.SET_NULL,
        null=True, blank=True,
        verbose_name="Assigned Employee",
        help_text="ุงูููุธู ุงููุณุคูู ุนู ูุชุงุจุนุฉ ูุฐุง ุงูุนููู ุงููุญุชูู (ุงุฎุชูุงุฑู)."
    )

    STATUS_CHOICES = [
        ("New", "New"),
        ("In Progress", "In Progress"),
        ("Closed", "Closed"),
        ("Converted", "Converted"),  # โ ุชู ุชุญููู ุงูุนููู ุฅูู ุตููุฉ ูุงุฌุญุฉ
    ]

    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default="New",
        verbose_name="Status",
        help_text="ุญุฏุฏ ุญุงูุฉ ุงูุนููู ุงููุญุชูู (ุฌุฏูุฏ - ููุฏ ุงููุชุงุจุนุฉ - ูุบูู - ุชู ุงูุชุญููู)."
    )

    created_at = models.DateTimeField(
        default=now,
        verbose_name="Created At",
        help_text="ููุช ุชุณุฌูู ุงูุนููู ุงููุญุชูู."
    )

    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name="Updated At",
        help_text="ุขุฎุฑ ุชุนุฏูู ูุณุฌู ุงูุนููู ุงููุญุชูู."
    )

    class Meta:
        ordering = ['-created_at']  # โ ุชุฑุชูุจ ุงูุนููุงุก ุงููุชููุนูู ุญุณุจ ุงูุฃุญุฏุซ
        verbose_name = "Lead"
        verbose_name_plural = "Leads"
        constraints = [
            models.UniqueConstraint(fields=['email', 'campaign'], name='unique_lead_per_campaign')
        ]  # โ ููุน ุชุณุฌูู ููุณ ุงูุนููู ูู ููุณ ุงูุญููุฉ ุฃูุซุฑ ูู ูุฑุฉ

    def clean(self):
        """
        โ ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ูุจู ุงูุญูุธ:
        - ุงูุชุฃูุฏ ูู ุนุฏู ุชูุฑุงุฑ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุญุชู ูู ูุงู ุจุฃุญุฑู ูุฎุชููุฉ.
        - ุงูุชุฃูุฏ ูู ุฃู ุงูุนููู ุบูุฑ ููุฑุฑ ูู ุญููุฉ ุฃุฎุฑู.
        """
        self.email = self.email.lower().strip()

        # โ ุงูุชุญูู ูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุนุจุฑ ุงูุญููุงุช
        existing_lead = Lead.objects.filter(email=self.email, campaign=self.campaign).exclude(pk=self.pk).exists()
        if existing_lead:
            raise ValidationError("โ ูุฐุง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุณุฌู ุจุงููุนู ูู ูุฐู ุงูุญููุฉ!")

        # โ ุงูุชุฃูุฏ ูู ุฃู ุงูุนููู ุบูุฑ ููุฑุฑ ูู ุญููุงุช ูุฎุชููุฉ
        multiple_campaigns = Lead.objects.filter(email=self.email).exclude(campaign=self.campaign).count()
        if multiple_campaigns >= 3:  # ๐ ุงูุณูุงุญ ุจุญุฏ ุฃูุตู 3 ุญููุงุช ููู ุจุฑูุฏ ุฅููุชุฑููู
            raise ValidationError("โ ูุง ูููู ุชุณุฌูู ูุฐุง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูู ุฃูุซุฑ ูู 3 ุญููุงุช!")

    def save(self, *args, **kwargs):
        """
        โ ุชุนุฏูู ุขูู ุนูู ุงูุจูุงูุงุช ูุจู ุงูุญูุธ:
        - ุชุญููู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุฅูู **ุฃุญุฑู ุตุบูุฑุฉ** ูุชุฌูุจ ุงูุชูุฑุงุฑ ุจุญุงูุงุช ูุฎุชููุฉ.
        - ุฅุฒุงูุฉ **ุงููุณุงูุงุช ุงูุฒุงุฆุฏุฉ** ูู ุงูุงุณู.
        - ุงูุชุฃูุฏ ูู ุฃู ุฑูู ุงููุงุชู **ูุชู ุญูุธู ุจุฏูู ูุณุงูุงุช**.
        """
        self.email = self.email.lower().strip()
        self.name = " ".join(self.name.split())

        if self.phone:
            self.phone = self.phone.replace(" ", "").strip()

        super().save(*args, **kwargs)

    def __str__(self):
        """โ ุชุญุณูู ุทุฑููุฉ ุนุฑุถ `Lead` ูุถูุงู ุนุฏู ุญุฏูุซ ุฎุทุฃ ุนูุฏ ุนุฏู ูุฌูุฏ ุญููุฉ."""
        campaign_name = self.campaign.name if self.campaign else "No Campaign"
        return f"{self.name} ({self.email}) - {self.status} [{campaign_name}]"
